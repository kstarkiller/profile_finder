services:
  postgres:
    image: postgres:latest
    restart: always
    container_name: pf_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 20s
    networks:
      - pf_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rag_api:
    build:
      context: ./rag_api
    image: pf_api
    restart: always
    container_name: pf_api
    environment:
      MINAI_API_KEY: ${MINAI_API_KEY}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pf_network
    volumes:
      - ollama_models:/root/.ollama/models 

  rag_front:
    build:
      context: ./app
    image: pf_front
    restart: always
    container_name: pf_front
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      HOST: postgres
      PORT: 5432
    ports:
      - "8501:8501"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pf_network

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    container_name: grafana
    environment:
      GF_SMTP_USER: ${GF_SMTP_USER}
      GF_SMTP_PASSWORD: ${GF_SMTP_PASSWORD}
    ports:
      - "3000:3000"
    networks:
      - metrics
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - metrics
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - metrics
    labels:
      org.label-schema.group: "monitoring"

  # clickhouse:
  #   image: clickhouse/clickhouse-server:24.2.2
  #   container_name: clickhouse
  #   environment:
  #     CLICKHOUSE_PASSWORD: ${OPENLIT_DB_PASSWORD:-OPENLIT}   
  #     CLICKHOUSE_USER: ${OPENLIT_DB_USER:-default}                   
  #   volumes:
  #     - clickhouse-data:/var/lib/clickhouse
  #   ports:
  #     - "9000:9000" 
  #     - "8123:8123" 
  #   restart: always
  
  # openlit:
  #   image: ghcr.io/openlit/openlit:latest
  #   container_name: openlit
  #   environment:
  #     INIT_DB_HOST: clickhouse
  #     INIT_DB_PORT: 8123
  #     INIT_DB_DATABASE: ${OPENLIT_DB_NAME:-openlit}
  #     INIT_DB_USERNAME: ${OPENLIT_DB_USER:-default}
  #     INIT_DB_PASSWORD: ${OPENLIT_DB_PASSWORD:-OPENLIT}
  #     SQLITE_DATABASE_URL: file:/app/client/data/data.db
  #   ports:
  #     - "3001:3000"
  #   depends_on:
  #     - clickhouse
  #   volumes:
  #     - openlit-data:/app/client/data
  #   restart: always

  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:0.94.0
  #   container_name: otel-collector
  #   environment:
  #     INIT_DB_HOST: clickhouse
  #     INIT_DB_PORT: 9000
  #     INIT_DB_DATABASE: ${OPENLIT_DB_NAME:-openlit}
  #     INIT_DB_USERNAME: ${OPENLIT_DB_USER:-default}
  #     INIT_DB_PASSWORD: ${OPENLIT_DB_PASSWORD:-OPENLIT}
  #   ports:
  #     - "4317:4317" 
  #     - "4318:4318" 
  #     - "8888:8888" 
  #     - "55679:55679" 
  #   depends_on:
  #     - clickhouse
  #   volumes:
  #     - ./openlit/assets/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
  #   restart: always

networks:
  pf_network:
    driver: bridge
    name: pf_network
  metrics:
    driver: bridge
    name: metrics

volumes:
  # clickhouse-data: {}
  # openlit-data: {}
  postgres_data: {}
  ollama_models: {}
  grafana-storage: {}
  prom_data: {}