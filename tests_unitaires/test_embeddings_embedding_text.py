# python -m unittest tests.test_embeddings_embedding_text
import unittest
from unittest.mock import patch, MagicMock
import os
from data_embedding.modules.embed_text import embedding_text


class TestEmbeddingText(unittest.TestCase):

    # D√©finir une fonction de test qui mocke la classe AzureOpenAI du module embed_text
    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_embedding_text_success(self, MockAzureOpenAI):
        # Cr√©er une instance de la classe AzureOpenAI mock√©e
        mock_client = MockAzureOpenAI.return_value

        # D√©finir la valeur de retour de la m√©thode embeddings.create du client mock√©
        mock_client.embeddings.create.return_value.data = [
            MagicMock(
                embedding=[0.1, 0.2, 0.3]
            )  # Donn√©es d'embedding mock√©es √† retourner
        ]

        # D√©finir temporairement des variables d'environnement pour la cl√© API et le point d'acc√®s Azure OpenAI
        with patch.dict(
            os.environ,
            {
                "AZURE_OPENAI_API_KEY": "fake_api_key",
                "AZURE_OPENAI_ENDPOINT": "https://fake.endpoint",
            },
        ):
            # D√©finir le texte d'entr√©e et le mod√®le √† utiliser dans la fonction embedding_text
            text = "Test text"
            model = "test-model"

            # Appeler la fonction embedding_text avec le texte et le mod√®le de test
            result = embedding_text(text, model)

            # V√©rifier que le r√©sultat correspond aux valeurs d'embedding attendues
            self.assertEqual(result, [0.1, 0.2, 0.3])

            # V√©rifier que la classe AzureOpenAI a √©t√© instanci√©e avec les bons param√®tres
            MockAzureOpenAI.assert_called_once_with(
                api_key="fake_api_key",
                api_version="2024-02-01",  # Assurer que la bonne version de l'API est utilis√©e
                azure_endpoint="https://fake.endpoint",
            )

            # V√©rifier que la m√©thode embeddings.create a √©t√© appel√©e une fois avec les bonnes entr√©es et le bon mod√®le
            mock_client.embeddings.create.assert_called_once_with(
                input=[text], model=model
            )

    # Remarques :
    # - @patch est utilis√© pour remplacer la classe AzureOpenAI par un mock pendant le test.
    # - MockAzureOpenAI.return_value fournit une instance mock√©e de la classe AzureOpenAI.
    # - patch.dict est utilis√© pour d√©finir temporairement des variables d'environnement dans le test.
    # - MagicMock est utilis√© pour cr√©er une valeur de retour mock√©e pour les donn√©es d'embedding.
    # - self.assertEqual et self.assert_called_once_with sont utilis√©s pour v√©rifier les r√©sultats attendus du test.

    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_special_characters(self, MockAzureOpenAI):
        mock_client = MockAzureOpenAI.return_value
        mock_client.embeddings.create.return_value.data = [
            MagicMock(embedding=[0.1, 0.2, 0.3])
        ]
        with patch.dict(
            os.environ,
            {
                "AZURE_OPENAI_API_KEY": "fake_api_key",
                "AZURE_OPENAI_ENDPOINT": "https://fake.endpoint",
            },
        ):
            special_text = "Hello, world! üòÉüöÄ‚ú®"
            model = "test-model"
            result = embedding_text(special_text, model)
            self.assertEqual(result, [0.1, 0.2, 0.3])
            MockAzureOpenAI.assert_called_once_with(
                api_key="fake_api_key",
                api_version="2024-02-01",
                azure_endpoint="https://fake.endpoint",
            )
            mock_client.embeddings.create.assert_called_once_with(
                input=[special_text], model=model
            )

    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_long_text(self, MockAzureOpenAI):
        mock_client = MockAzureOpenAI.return_value
        mock_client.embeddings.create.return_value.data = [
            MagicMock(embedding=[0.1, 0.2, 0.3])
        ]
        with patch.dict(
            os.environ,
            {
                "AZURE_OPENAI_API_KEY": "fake_api_key",
                "AZURE_OPENAI_ENDPOINT": "https://fake.endpoint",
            },
        ):
            long_text = "A" * 10000
            model = "test-model"
            result = embedding_text(long_text, model)
            self.assertEqual(result, [0.1, 0.2, 0.3])
            MockAzureOpenAI.assert_called_once_with(
                api_key="fake_api_key",
                api_version="2024-02-01",
                azure_endpoint="https://fake.endpoint",
            )
            mock_client.embeddings.create.assert_called_once_with(
                input=[long_text], model=model
            )

    # Cas de test d'erreurs
    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_missing_api_key(self, MockAzureOpenAI):
        with patch.dict(
            os.environ,
            {
                "AZURE_OPENAI_API_KEY": "",
                "AZURE_OPENAI_ENDPOINT": "https://fake.endpoint",
            },
        ):
            text = "Test text"
            model = "test-model"
            with self.assertRaises(ValueError):
                embedding_text(text, model)

    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_invalid_model(self, MockAzureOpenAI):
        mock_client = MockAzureOpenAI.return_value
        mock_client.embeddings.create.side_effect = Exception("Model not found")
        with patch.dict(
            os.environ,
            {
                "AZURE_OPENAI_API_KEY": "fake_api_key",
                "AZURE_OPENAI_ENDPOINT": "https://fake.endpoint",
            },
        ):
            text = "Test text"
            model = "invalid-model"
            with self.assertRaises(Exception):
                embedding_text(text, model)

    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_missing_endpoint(self, MockAzureOpenAI):
        with patch.dict(
            os.environ,
            {"AZURE_OPENAI_API_KEY": "fake_api_key", "AZURE_OPENAI_ENDPOINT": ""},
        ):
            text = "Test text"
            model = "test-model"
            with self.assertRaises(ValueError):
                embedding_text(text, model)

    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_missing_text(self, MockAzureOpenAI):
        with patch.dict(
            os.environ,
            {
                "AZURE_OPENAI_API_KEY": "fake_api_key",
                "AZURE_OPENAI_ENDPOINT": "https://fake.endpoint",
            },
        ):
            text = ""
            model = "test-model"
            with self.assertRaises(ValueError):
                embedding_text(text, model)

    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_network_error(self, MockAzureOpenAI):
        mock_client = MockAzureOpenAI.return_value
        mock_client.embeddings.create.side_effect = Exception("Network error")
        with patch.dict(
            os.environ,
            {
                "AZURE_OPENAI_API_KEY": "fake_api_key",
                "AZURE_OPENAI_ENDPOINT": "https://fake.endpoint",
            },
        ):
            text = "Test text"
            model = "test-model"
            with self.assertRaises(Exception):
                embedding_text(text, model)

    @patch("data_embedding.modules.embed_text.AzureOpenAI")
    def test_invalid_text_type(self, MockAzureOpenAI):
        with patch.dict(
            os.environ,
            {
                "AZURE_OPENAI_API_KEY": "fake_api_key",
                "AZURE_OPENAI_ENDPOINT": "https://fake.endpoint",
            },
        ):
            invalid_text = 12345
            model = "test-model"
            with self.assertRaises(TypeError):
                embedding_text(invalid_text, model)


if __name__ == "__main__":
    unittest.main()
